#define _CRT_SECURE_NO_WARNINGS
#include"Function.h"
#include <iostream>
#include <vector>
#include<stdlib.h>
#include<Windows.h>
#include<ctime>
clock_t start, ende;
void svd() {
	vector<vector<double>> A = { {1.0000000000,4.9176000000,1.0000000000,3.4720000000,0.9980000000,1.0000000000,7.0000000000,4.0000000000,42.0000000000,3.0000000000,1.0000000000,0.0000000000},{1.0000000000,5.0208000000,1.0000000000,3.5310000000,1.5000000000,2.0000000000,7.0000000000,4.0000000000,62.0000000000,1.0000000000,1.0000000000,0.0000000000},{1.0000000000,4.5429000000,1.0000000000,2.2750000000,1.1750000000,1.0000000000,6.0000000000,3.0000000000,40.0000000000,2.0000000000,1.0000000000,0.0000000000},{1.0000000000,4.5573000000,1.0000000000,4.0500000000,1.2320000000,1.0000000000,6.0000000000,3.0000000000,54.0000000000,4.0000000000,1.0000000000,0.0000000000},{1.0000000000,5.0597000000,1.0000000000,4.4550000000,1.1210000000,1.0000000000,6.0000000000,3.0000000000,42.0000000000,3.0000000000,1.0000000000,0.0000000000},{1.0000000000,3.8910000000,1.0000000000,4.4550000000,0.9880000000,1.0000000000,6.0000000000,3.0000000000,56.0000000000,2.0000000000,1.0000000000,0.0000000000},{1.0000000000,5.8980000000,1.0000000000,5.8500000000,1.2400000000,1.0000000000,7.0000000000,3.0000000000,51.0000000000,2.0000000000,1.0000000000,1.0000000000},{1.0000000000,5.6039000000,1.0000000000,9.5200000000,1.5010000000,0.0000000000,6.0000000000,3.0000000000,32.0000000000,1.0000000000,1.0000000000,0.0000000000},{1.0000000000,15.4202000000,2.5000000000,9.8000000000,3.4200000000,2.0000000000,10.0000000000,5.0000000000,42.0000000000,2.0000000000,1.0000000000,1.0000000000},{1.0000000000,14.4598000000,2.5000000000,12.8000000000,3.0000000000,2.0000000000,9.0000000000,5.0000000000,14.0000000000,4.0000000000,1.0000000000,1.0000000000},{1.0000000000,5.8282000000,1.0000000000,6.4350000000,1.2250000000,2.0000000000,6.0000000000,3.0000000000,32.0000000000,1.0000000000,1.0000000000,0.0000000000},{1.0000000000,5.3003000000,1.0000000000,4.9883000000,1.5520000000,1.0000000000,6.0000000000,3.0000000000,30.0000000000,1.0000000000,2.0000000000,0.0000000000},{1.0000000000,6.2712000000,1.0000000000,5.5200000000,0.9750000000,1.0000000000,5.0000000000,2.0000000000,30.0000000000,1.0000000000,2.0000000000,0.0000000000},{1.0000000000,5.9592000000,1.0000000000,6.6660000000,1.1210000000,2.0000000000,6.0000000000,3.0000000000,32.0000000000,2.0000000000,1.0000000000,0.0000000000},{1.0000000000,5.0500000000,1.0000000000,5.0000000000,1.0200000000,0.0000000000,5.0000000000,2.0000000000,46.0000000000,4.0000000000,1.0000000000,1.0000000000},{1.0000000000,5.6039000000,1.0000000000,9.5200000000,1.5010000000,0.0000000000,6.0000000000,3.0000000000,32.0000000000,1.0000000000,1.0000000000,0.0000000000},{1.0000000000,8.2464000000,1.5000000000,5.1500000000,1.6640000000,2.0000000000,8.0000000000,4.0000000000,50.0000000000,4.0000000000,1.0000000000,0.0000000000},{1.0000000000,6.6969000000,1.5000000000,6.0920000000,1.4880000000,1.5000000000,7.0000000000,3.0000000000,22.0000000000,1.0000000000,1.0000000000,1.0000000000},{1.0000000000,7.7841000000,1.5000000000,7.1020000000,1.3760000000,1.0000000000,6.0000000000,3.0000000000,17.0000000000,2.0000000000,1.0000000000,0.0000000000},{1.0000000000,9.0384000000,1.0000000000,7.8000000000,1.5000000000,1.5000000000,7.0000000000,3.0000000000,23.0000000000,3.0000000000,3.0000000000,0.0000000000},{1.0000000000,5.9894000000,1.0000000000,5.5200000000,1.2560000000,2.0000000000,6.0000000000,3.0000000000,40.0000000000,4.0000000000,1.0000000000,1.0000000000},{1.0000000000,7.5422000000,1.5000000000,4.0000000000,1.6900000000,1.0000000000,6.0000000000,3.0000000000,22.0000000000,1.0000000000,1.0000000000,0.0000000000},{1.0000000000,8.7951000000,1.5000000000,9.8900000000,1.8200000000,2.0000000000,8.0000000000,4.0000000000,50.0000000000,1.0000000000,1.0000000000,1.0000000000},{1.0000000000,6.0931000000,1.5000000000,6.7265000000,1.6520000000,1.0000000000,6.0000000000,3.0000000000,44.0000000000,4.0000000000,1.0000000000,0.0000000000},{1.0000000000,8.3607000000,1.5000000000,9.1500000000,1.7770000000,2.0000000000,8.0000000000,4.0000000000,48.0000000000,1.0000000000,1.0000000000,1.0000000000},{1.0000000000,8.1400000000,1.0000000000,8.0000000000,1.5040000000,2.0000000000,7.0000000000,3.0000000000,3.0000000000,1.0000000000,3.0000000000,0.0000000000},{1.0000000000,9.1416000000,1.5000000000,7.3262000000,1.8310000000,1.5000000000,8.0000000000,4.0000000000,31.0000000000,4.0000000000,1.0000000000,0.0000000000},{1.0000000000,12.0000000000,1.5000000000,5.0000000000,1.2000000000,2.0000000000,6.0000000000,3.0000000000,30.0000000000,3.0000000000,1.0000000000,1.0000000000} };
	int j = 0;
	int m = A.size();
	int n = A[0].size();
	vector<vector<double>> P(m, vector<double>(m));
	vector<vector<double>> Q(n, vector<double>(n));
	vector<vector<double>> B(n, vector<double>(n));
	vector<double>d(n);
	vector<vector<double>> M(m, vector<double>(n));
	vector<vector<double>> P1(m, vector<double>(m));
	vector<vector<double>> Q1(n, vector<double>(n));
	P = unit(m);
	Q = unit(n);
	P1 = unit(m);
	Q1 = unit(n);
	j = SVD(A, P, Q, B);
	cout << "迭代次数为" << j;
	cout << endl;
	A = { {1.0000000000,4.9176000000,1.0000000000,3.4720000000,0.9980000000,1.0000000000,7.0000000000,4.0000000000,42.0000000000,3.0000000000,1.0000000000,0.0000000000},{1.0000000000,5.0208000000,1.0000000000,3.5310000000,1.5000000000,2.0000000000,7.0000000000,4.0000000000,62.0000000000,1.0000000000,1.0000000000,0.0000000000},{1.0000000000,4.5429000000,1.0000000000,2.2750000000,1.1750000000,1.0000000000,6.0000000000,3.0000000000,40.0000000000,2.0000000000,1.0000000000,0.0000000000},{1.0000000000,4.5573000000,1.0000000000,4.0500000000,1.2320000000,1.0000000000,6.0000000000,3.0000000000,54.0000000000,4.0000000000,1.0000000000,0.0000000000},{1.0000000000,5.0597000000,1.0000000000,4.4550000000,1.1210000000,1.0000000000,6.0000000000,3.0000000000,42.0000000000,3.0000000000,1.0000000000,0.0000000000},{1.0000000000,3.8910000000,1.0000000000,4.4550000000,0.9880000000,1.0000000000,6.0000000000,3.0000000000,56.0000000000,2.0000000000,1.0000000000,0.0000000000},{1.0000000000,5.8980000000,1.0000000000,5.8500000000,1.2400000000,1.0000000000,7.0000000000,3.0000000000,51.0000000000,2.0000000000,1.0000000000,1.0000000000},{1.0000000000,5.6039000000,1.0000000000,9.5200000000,1.5010000000,0.0000000000,6.0000000000,3.0000000000,32.0000000000,1.0000000000,1.0000000000,0.0000000000},{1.0000000000,15.4202000000,2.5000000000,9.8000000000,3.4200000000,2.0000000000,10.0000000000,5.0000000000,42.0000000000,2.0000000000,1.0000000000,1.0000000000},{1.0000000000,14.4598000000,2.5000000000,12.8000000000,3.0000000000,2.0000000000,9.0000000000,5.0000000000,14.0000000000,4.0000000000,1.0000000000,1.0000000000},{1.0000000000,5.8282000000,1.0000000000,6.4350000000,1.2250000000,2.0000000000,6.0000000000,3.0000000000,32.0000000000,1.0000000000,1.0000000000,0.0000000000},{1.0000000000,5.3003000000,1.0000000000,4.9883000000,1.5520000000,1.0000000000,6.0000000000,3.0000000000,30.0000000000,1.0000000000,2.0000000000,0.0000000000},{1.0000000000,6.2712000000,1.0000000000,5.5200000000,0.9750000000,1.0000000000,5.0000000000,2.0000000000,30.0000000000,1.0000000000,2.0000000000,0.0000000000},{1.0000000000,5.9592000000,1.0000000000,6.6660000000,1.1210000000,2.0000000000,6.0000000000,3.0000000000,32.0000000000,2.0000000000,1.0000000000,0.0000000000},{1.0000000000,5.0500000000,1.0000000000,5.0000000000,1.0200000000,0.0000000000,5.0000000000,2.0000000000,46.0000000000,4.0000000000,1.0000000000,1.0000000000},{1.0000000000,5.6039000000,1.0000000000,9.5200000000,1.5010000000,0.0000000000,6.0000000000,3.0000000000,32.0000000000,1.0000000000,1.0000000000,0.0000000000},{1.0000000000,8.2464000000,1.5000000000,5.1500000000,1.6640000000,2.0000000000,8.0000000000,4.0000000000,50.0000000000,4.0000000000,1.0000000000,0.0000000000},{1.0000000000,6.6969000000,1.5000000000,6.0920000000,1.4880000000,1.5000000000,7.0000000000,3.0000000000,22.0000000000,1.0000000000,1.0000000000,1.0000000000},{1.0000000000,7.7841000000,1.5000000000,7.1020000000,1.3760000000,1.0000000000,6.0000000000,3.0000000000,17.0000000000,2.0000000000,1.0000000000,0.0000000000},{1.0000000000,9.0384000000,1.0000000000,7.8000000000,1.5000000000,1.5000000000,7.0000000000,3.0000000000,23.0000000000,3.0000000000,3.0000000000,0.0000000000},{1.0000000000,5.9894000000,1.0000000000,5.5200000000,1.2560000000,2.0000000000,6.0000000000,3.0000000000,40.0000000000,4.0000000000,1.0000000000,1.0000000000},{1.0000000000,7.5422000000,1.5000000000,4.0000000000,1.6900000000,1.0000000000,6.0000000000,3.0000000000,22.0000000000,1.0000000000,1.0000000000,0.0000000000},{1.0000000000,8.7951000000,1.5000000000,9.8900000000,1.8200000000,2.0000000000,8.0000000000,4.0000000000,50.0000000000,1.0000000000,1.0000000000,1.0000000000},{1.0000000000,6.0931000000,1.5000000000,6.7265000000,1.6520000000,1.0000000000,6.0000000000,3.0000000000,44.0000000000,4.0000000000,1.0000000000,0.0000000000},{1.0000000000,8.3607000000,1.5000000000,9.1500000000,1.7770000000,2.0000000000,8.0000000000,4.0000000000,48.0000000000,1.0000000000,1.0000000000,1.0000000000},{1.0000000000,8.1400000000,1.0000000000,8.0000000000,1.5040000000,2.0000000000,7.0000000000,3.0000000000,3.0000000000,1.0000000000,3.0000000000,0.0000000000},{1.0000000000,9.1416000000,1.5000000000,7.3262000000,1.8310000000,1.5000000000,8.0000000000,4.0000000000,31.0000000000,4.0000000000,1.0000000000,0.0000000000},{1.0000000000,12.0000000000,1.5000000000,5.0000000000,1.2000000000,2.0000000000,6.0000000000,3.0000000000,30.0000000000,3.0000000000,1.0000000000,1.0000000000} };
	for (int i = 0; i < n; i++) {
		d[i] = B[i][i];
	}
	QuickSort(d, 0, n - 1);
	cout << "奇异值从小到大为";
	cout << endl;
	for (int i = 0; i < n; i++) {
		cout << d[i] << " ";
	}
	cout << endl;
	double ep = zuida(substract(mutil(P, transpose(P)), P1));
	cout << "ep=" << ep;
	cout << endl;
	double eq = zuida(substract(mutil(Q, transpose(Q)), Q1));
	cout << "eq=" << eq;
	cout << endl;
	copy(B, M, 0, 0);
	double et = zuida(substract(mutil(mutil(P, A), Q), M));
	cout << "et=" << et;
	cout << endl;
	cout << "A=PTQ";
	cout << endl;
	cout << "P=";
	print(transpose(P));
	cout << endl;
	cout << "T=";
	print(M);
	cout << endl;
	cout << "Q=";


	print(transpose(Q));

}